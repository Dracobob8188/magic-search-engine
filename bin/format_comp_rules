#!/usr/bin/env ruby

require "pathname"

class String
  def oneline
    gsub(/\s+/, " ")
  end
end

class FormatCompRules
  def run!
    @output = []
    paras = text_rules.split(/\n{2,}/)

    raise unless paras[0] == "Magic: The Gathering Comprehensive Rules"
    primary_header! paras.shift
    para! paras.shift while paras[0] != "Introduction"
    secondary_header! paras.shift
    para! paras.shift while paras[0] != "Contents"
    secondary_header! paras.shift

    while paras[0] != "1. Game Concepts"
      tos_section! paras.shift
    end

    while paras[0] =~ /\A\d/
      rule! paras.shift
    end

    raise unless paras[0] == "Glossary"
    secondary_header! paras.shift

    while paras[0] != "Credits"
      glossary_entry! paras.shift
    end

    secondary_header! paras.shift
    para! paras.shift while paras[0]

    save!
  end

  ## Output formatting

  def ref(id)
    "section-#{ id.downcase.sub(/\.\z/, "").gsub(/[^a-z0-9]/, "-") }"
  end

  def resolve_references(text)
    text.gsub(/\b\d{3}\.\d+[a-z]\b|\b\d{3}\.\d+\b|\b\d{3}\b/) do
      %Q[<a href="##{ref($&)}">#{$&}</a>]
    end
  end

  def glossary_entry!(text)
    term, definition = text.split("\n", 2)
    @output << ".glossary_entry"
    @output << "  .glossary_term #{term}"
    @output << "  .glossary_definition #{resolve_references(definition).oneline}"
  end

  def rule!(rule)
    rule_id, rule_text = rule.split(" ", 2)
    @output << ".rule{id: #{ref(rule_id).inspect}}"
    @output << "  .rule_id #{rule_id}"
    rule_text.split("\n").each do |rule_line|
      @output << "  .rule_text #{resolve_references(rule_line)}"
    end
  end

  def tos_entry!(tos_entry)
    if tos_entry =~ /\A(\d+)/
      section_ref = "section-#{$1}"
    else
      section_ref = "section-#{tos_entry.downcase}"
    end
    @output << "  %li"
    @output << "    %a{href: '##{section_ref}'} #{tos_entry.oneline}"
  end

  def tos_section!(text)
    @output << "%ul.tos_section"
    text.split("\n").each do |tos_entry|
      tos_entry! tos_entry
    end
  end

  def primary_header!(text)
    @output << "%h4 #{text.oneline}"
  end

  def secondary_header!(text)
    @output << "%h3{id: #{ref(text).inspect}} #{text.oneline}"
  end

  def para!(text)
    @output << "%p #{text.oneline}"
  end

  ## Everything else

  def save!
    html_rules_path.write(@output.join("\n")+"\n")
  end

  def html_rules_path
    Pathname(__dir__) + "../frontend/app/views/help/rules.html.haml"
  end

  def text_rules_path
    Pathname(__dir__) + "../data/MagicCompRules.txt"
  end

  def text_rules
    @text_rules ||= html_escape(text_rules_path
                      .read
                      .force_encoding("windows-1252")
                      .encode("utf-8")
                      .tr("\r", "")
                    )
  end

  def html_escape(txt)
    raise if txt =~ /[<>]/
    txt.gsub("&", "&amp;")
  end
end

FormatCompRules.new.run!
