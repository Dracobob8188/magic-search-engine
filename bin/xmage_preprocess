#!/usr/bin/env ruby

require "json"
require "pathname"
require "set"
require "pry"

# They mostly match, just document exceptions
XMAGE_TO_MTGJSON_SET_MAP = {
  "APAC" => "PALP",
  "EURO" => "PELP",
  "HOTR" => "HTR",
}

IGNORE_CODE_MISMATCHES = %W[
  C13
  C14
  C15
  C16
  C17
  C18
  C19
  C20
  CM2
  CMD
  CMD
  CNS
  DVD
  EVG
  EVG
  GS1
  GVL
  H17
  JVC
  PC2
  PGPX
  SLD
  TSB
].to_set

# That's a lot more than I expected
CARDS_NAME_FIXES = {
  "AErathi Berserker" => "Aerathi Berserker",
  "Amoeboid Changling" => "Amoeboid Changeling",
  "Azcanta, The Sunken Ruin" => "Azcanta, the Sunken Ruin",
  "Bloodforged War Axe" => "Bloodforged Battle-Axe",
  "Bosium Strip" => "Bösium Strip",
  "Box of Freerange Goblins" => "Box of Free-Range Goblins",
  "Budoka Pupil" => "Budoka Pupil // Ichiga, Who Topples Oaks",
  "call of the Conclave" => "Call of the Conclave",
  "Callow Jushi" => "Callow Jushi // Jaraku the Interloper",
  "Chicken a la King" => "Chicken à la King",
  "Consecrated By Blood" => "Consecrated by Blood",
  "Cunning Bandit" => "Cunning Bandit // Azamuki, Treachery Incarnate",
  "Dandan" => "Dandân",
  "Dark Imposter" => "Dark Impostor",
  "Dej  Vu" => "Déjà Vu",
  "Deja Vu" => "Déjà Vu",
  "Devil's Playground" => "Devils' Playground",
  "Devious Cover-up" => "Devious Cover-Up",
  "El-Hajjaj" => "El-Hajjâj",
  "Expel From Orazca" => "Expel from Orazca",
  "Ghazban Ogre" => "Ghazbán Ogre",
  "Hired Muscle" => "Hired Muscle // Scarmaker",
  "Ifh-Biff Efreet" => "Ifh-Bíff Efreet",
  "Jotun Grunt" => "Jötun Grunt",
  "Jotun Owl Keeper" => "Jötun Owl Keeper",
  "Jun n Efreet" => "Junún Efreet",
  "Junun Efreet" => "Junún Efreet",
  "Juzam Djinn" => "Juzám Djinn",
  "Khabal Ghoul" => "Khabál Ghoul",
  "Klyomaro, First to Stand" => "Kiyomaro, First to Stand",
  "Kongming, 'Sleeping Dragon'" => 'Kongming, "Sleeping Dragon"',
  "Larger than Life" => "Larger Than Life",
  "Legions of Lim-Dul" => "Legions of Lim-Dûl",
  "Lim-Dul the Necromancer" => "Lim-Dûl the Necromancer",
  "Lim-Dul's Cohort" => "Lim-Dûl's Cohort",
  "Lim-Dul's Hex" => "Lim-Dûl's Hex",
  "Lim-Dul's High Guard" => "Lim-Dûl's High Guard",
  "Lim-Dul's Paladin" => "Lim-Dûl's Paladin",
  "Lim-Dul's Vault" => "Lim-Dûl's Vault",
  "Marton Stromgald" => "Márton Stromgald",
  "Monstrous Hount" => "Monstrous Hound",
  "Oath of Lim-Dul" => "Oath of Lim-Dûl",
  "One with the Wind" => "One With the Wind",
  "Pang Tong, 'Young Phoenix'" => "Pang Tong, \"Young Phoenix\"",
  "Prepared" => "Prepare",
  "Quietus SPike" => "Quietus Spike",
  "Reckless Fireweaver " => "Reckless Fireweaver",
  "Ring of Ma'ruf" => "Ring of Ma'rûf",
  "Sage-Eye Anvengers" => "Sage-Eye Avengers",
  "Seance" => "Séance",
  "Sensei's Diving Top" => "Sensei's Divining Top",
  "Sin COllector" => "Sin Collector",
  "Stone-Tongue Baselisk" => "Stone-Tongue Basilisk",
  "Sword of Dungeons and Dragons" => "Sword of Dungeons & Dragons",
  "The Ultimate Nightmare of Wizards of the Coast Customer Service" => "The Ultimate Nightmare of Wizards of the Coast® Customer Service",
}

# FIXME: This importer has a lot of issues right now
class XMagePreprocess
  def cards_data
    @cards_data ||= Pathname("#{__dir__}/../tmp/mtg-cards-data.txt").readlines.map(&:chomp)
  end

  def sets_data
    @sets_data ||= Pathname("#{__dir__}/../tmp/mtg-sets-data.txt").readlines.map(&:chomp)
  end

  def sets
    @sets ||= sets_data.map{|line|
      name, code = line.split("|")[0,2]
      [name, XMAGE_TO_MTGJSON_SET_MAP[code] || code]
    }.to_h
  end

  def cards
    @cards ||= cards_data.flat_map{|line|
      name, set_name = line.split("|")[0,2]
      # Inconsistencies within XMage data
      case set_name
      when "Premium Deck Series: Fire & Lightning"
        set_name = "Premium Deck Series: Fire and Lightning"
      when "Commander 2018"
        set_name = "Commander 2018 Edition"
      when "Commander 2019"
        set_name = "Commander 2019 Edition"
      when "Commander 2020"
        set_name = "Commander 2020 Edition"
      when "World Magic Cup Qualifier", "Champs", "Masterpiece Series Amonkhet", "Double Masters"
        next
      when "Star Wars"
        # not a real Magic set
        next
      end
      code = sets.fetch(set_name).downcase
      name = CARDS_NAME_FIXES[name] || name
      name.split(" // ").map{|n| [code, n]}
    }.compact
  end

  def verify_set_codes!
    sets.each do |name, code|
      file_name = "#{code}.json"
      file_name = "CON_.json" if code == "CON" # this is Windows filename issue, not set code
      data_path = Pathname("#{__dir__}/../data/sets/#{file_name}")
      if data_path.exist?
        data = JSON.parse(data_path.read)
        mtgjson_name = data["name"]
        if name == mtgjson_name
          # OK
        else
          # A lot of these are totally fine like `Commander 2013 Edition' vs `Commander 2013'
          next if IGNORE_CODE_MISMATCHES.include?(code)
          warn "Mismatching name for #{code}: `#{name}' vs `#{mtgjson_name}'"
        end
      else
        warn "No data for #{code}: `#{name}'"
      end
    end
  end

  def call
    # verify_set_codes!
    Pathname("#{__dir__}/../data/xmage_cards.txt").open("w") do |fh|
      cards.each do |code, name|
        fh.puts [code, name].join("\t")
      end
    end
  end
end

XMagePreprocess.new.call
