#!/usr/bin/env ruby

require_relative "../search-engine/lib/card_database"
require "memoist"

class VerifyArenaBoosters
  attr_reader :db

  def initialize
    @db = CardDatabase.load
  end

  def boosters_to_verify
    @boosters_to_verify ||= begin
      arena_boosters = @db.supported_booster_types.keys.grep(/-arena\z/)
      arena_boosters.select{|k| @db.supported_booster_types[k.split("-", 2)[0]]}
    end
  end

  def booster_has_foils?(booster)
    !booster.expected_values.keys.select(&:foil).empty?
  end

  def booster_without_foils?(booster)
    !booster_has_foils?(booster)
  end

  def find_nonfoil_variant(booster)
    return booster if booster_without_foils?(booster)
    variants_with_no_foils = booster.packs.keys.select{|b| !booster_has_foils?(b)}
    if variants_with_no_foils.size == 1
      return variants_with_no_foils[0]
    end
    warn "#{booster.code} has #{variants_with_no_foils.size} variants with no foils, cannot pick unique one"
    nil
  end

  # Merge cards with same name
  # Skip basics
  def expected_values_by_name(booster)
    result = {}
    booster.expected_values.each do |card, ev|
      name = card.name
      next if ["Forest", "Island", "Mountain", "Plains", "Swamp"].include?(name)
      result[name] ||= 0
      result[name] += ev
    end
    result
  end

  def call
    boosters_to_verify.each do |code|
      arena_booster = @db.supported_booster_types[code]
      draft_booster = @db.supported_booster_types[arena_booster.set_code]
      draft_nonfoil_booster = find_nonfoil_variant(draft_booster)

      warn "#{code} has foils" if booster_has_foils?(arena_booster)

      next unless draft_nonfoil_booster

      arena_ev = expected_values_by_name(arena_booster)
      draft_ev = expected_values_by_name(draft_nonfoil_booster)

      if arena_ev == draft_ev
        warn "#{code} OK"
      else
        warn "#{code} EV mismatch"
      end
    end
  end
end

VerifyArenaBoosters.new.call
